name: Publish to crates.io

on:
  # Trigger on GitHub releases
  release:
    types: [published]

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Run in dry-run mode (test without publishing)'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests before publishing'
        required: false
        default: false
        type: boolean

env:
  CARGO_TERM_COLOR: always

jobs:
  # 智能发布所有包
  publish-all:
    name: Smart publish to crates.io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get current version
        id: version
        run: |
          # 从 workspace 获取版本
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Smart dependency update
        run: |
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
          echo "Updating internal dependencies to version $CURRENT_VERSION"

          # 临时更新依赖版本以支持发布
          # 这些更改只在 CI 中生效，不会提交到仓库

          # 检查 purger-core 是否已发布
          CORE_EXISTS=$(curl -s "https://crates.io/api/v1/crates/purger-core" | jq -r ".versions[] | select(.num == \"$CURRENT_VERSION\") | .num" 2>/dev/null || echo "")

          if [[ -n "$CORE_EXISTS" ]]; then
            echo "✅ purger-core $CURRENT_VERSION already exists, updating dependencies"
            # 更新所有依赖到已发布的版本
            sed -i "s/purger-core = { version = \"[^\"]*\"/purger-core = { version = \"$CURRENT_VERSION\"/g" purger-cli/Cargo.toml
            sed -i "s/purger-core = { version = \"[^\"]*\"/purger-core = { version = \"$CURRENT_VERSION\"/g" purger-gui/Cargo.toml
            sed -i "s/purger-core = { version = \"[^\"]*\"/purger-core = { version = \"$CURRENT_VERSION\"/g" Cargo.toml
          else
            echo "📦 purger-core $CURRENT_VERSION not published yet, will publish it first"
          fi

      - name: Pre-publish checks
        if: ${{ !inputs.skip_tests }}
        run: |
          echo "Running pre-publish checks..."
          cargo fmt --all -- --check
          cargo clippy --workspace --all-targets --all-features -- -D warnings

          # 只对已发布依赖的包运行测试
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"
          CORE_EXISTS=$(curl -s "https://crates.io/api/v1/crates/purger-core" | jq -r ".versions[] | select(.num == \"$CURRENT_VERSION\") | .num" 2>/dev/null || echo "")

          if [[ -n "$CORE_EXISTS" ]]; then
            echo "Running full test suite..."
            cargo test --workspace --all-features
          else
            echo "Running core tests only..."
            cargo test -p purger-core --all-features
          fi

      - name: Smart publish packages
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          CURRENT_VERSION="${{ steps.version.outputs.current_version }}"

          # 检查 token
          if [[ "${{ inputs.dry_run }}" != "true" ]] && [[ -z "$CARGO_REGISTRY_TOKEN" ]]; then
            echo "❌ Error: CARGO_REGISTRY_TOKEN is not set"
            echo "Please add your crates.io API token to GitHub Secrets"
            echo "Go to: Repository Settings → Secrets and variables → Actions"
            echo "Add a secret named 'CARGO_REGISTRY_TOKEN' with your crates.io API token"
            exit 1
          fi

          # 检查包是否已发布的函数
          check_published() {
            local crate_name=$1
            local version=$2
            curl -s "https://crates.io/api/v1/crates/$crate_name" | jq -r ".versions[] | select(.num == \"$version\") | .num" 2>/dev/null || echo ""
          }

          # 发布包的函数
          publish_package() {
            local package_name=$1
            local package_dir=$2

            echo "📦 Processing $package_name..."

            # 检查是否已发布
            if [[ -n "$(check_published "$package_name" "$CURRENT_VERSION")" ]]; then
              echo "✅ $package_name $CURRENT_VERSION already published, skipping"
              return 0
            fi

            if [[ "${{ inputs.dry_run }}" == "true" ]]; then
              echo "🧪 Dry run: Would publish $package_name"
              if [[ -n "$package_dir" ]]; then
                cd "$package_dir"
                cargo publish --dry-run
                cd ..
              else
                cargo publish --dry-run
              fi
            else
              echo "📦 Publishing $package_name..."
              if [[ -n "$package_dir" ]]; then
                cd "$package_dir"
                cargo publish --token "$CARGO_REGISTRY_TOKEN"
                cd ..
              else
                cargo publish --token "$CARGO_REGISTRY_TOKEN"
              fi

              echo "⏳ Waiting 60 seconds for crates.io propagation..."
              sleep 60
            fi
          }

          # 按依赖顺序发布包
          echo "🚀 Starting smart package publishing for version $CURRENT_VERSION"

          # 1. 发布 purger-core (无依赖)
          publish_package "purger-core" "purger-core"

          # 2. 更新依赖版本（如果 core 刚刚发布）
          if [[ "${{ inputs.dry_run }}" != "true" ]]; then
            echo "🔄 Updating dependency versions after core publication..."
            sed -i "s/purger-core = { version = \"[^\"]*\"/purger-core = { version = \"$CURRENT_VERSION\"/g" purger-cli/Cargo.toml
            sed -i "s/purger-core = { version = \"[^\"]*\"/purger-core = { version = \"$CURRENT_VERSION\"/g" purger-gui/Cargo.toml
            sed -i "s/purger-core = { version = \"[^\"]*\"/purger-core = { version = \"$CURRENT_VERSION\"/g" Cargo.toml
          fi

          # 3. 发布 purger-cli (依赖 purger-core)
          publish_package "purger-cli" "purger-cli"

          # 4. 发布 purger-gui (依赖 purger-core)
          publish_package "purger-gui" "purger-gui"

          # 5. 发布 purger (依赖 purger-core)
          publish_package "purger" ""

          echo "✅ Smart publishing completed!"

      - name: Summary
        run: |
          echo "## 🚀 Publishing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ steps.version.outputs.current_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode:** ${{ inputs.dry_run == 'true' && '🧪 Dry run' || '✅ Live publish' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
